# Default values for n8n
replicaCount: 1

image:
  repository: n8nio/n8n
  pullPolicy: IfNotPresent
  tag: "1.95.3"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  fsGroupChangePolicy: "OnRootMismatch"
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  capabilities:
    drop:
    - ALL
  seccompProfile:
    type: RuntimeDefault

service:
  type: ClusterIP
  port: 5678

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: n8n.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

livenessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 60  # Increased for database connection setup
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 30  # Increased for database initialization
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10  # Reduced from unrealistic 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

volumes: []
volumeMounts: []

nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - n8n
        topologyKey: kubernetes.io/hostname

# n8n configuration
n8n:
  # SECURITY: Generate a secure random 32-character encryption key for production
  # Use: openssl rand -hex 16 or generate via secure random generator
  encryption_key: ""  # Auto-generated if empty, MUST be set for production
  # For external secret management, use:
  # existingSecret: ""
  # existingSecretKey: "encryption-key"
  executions_mode: "queue"
  queue_mode: "redis"
  
  # Environment variables
  env:
    NODE_ENV: "production"
    WEBHOOK_URL: "https://n8n.local"
    GENERIC_TIMEZONE: "UTC"
    # Optional: Pre-configure admin user (remove these for setup wizard)
    # N8N_OWNER_EMAIL: "admin@example.com"
    # N8N_OWNER_PASSWORD: "admin123"
    
  # Persistence for user data
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 8Gi

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    # Generate secure random passwords on first install
    # Override these in production with your own secrets
    postgresPassword: ""  # Auto-generated if empty
    username: "n8n"
    password: ""          # Auto-generated if empty
    database: "n8n"
    # Use existing secret (optional)
    existingSecret: ""
    secretKeys:
      adminPasswordKey: "postgres-password"
      userPasswordKey: "password"
  primary:
    persistence:
      enabled: true
      size: 8Gi

# Redis configuration  
redis:
  enabled: true
  auth:
    enabled: true
    password: ""          # Auto-generated if empty
    # Use existing secret (optional)
    existingSecret: ""
    existingSecretPasswordKey: "redis-password"
  master:
    persistence:
      enabled: true
      size: 8Gi